A_EGO <- function(QMC, fun, model, npoints, optimum, eps, lower, upper, 
                  minimization = TRUE, control = NULL)
{
  ############################################################################################
  ###  this file is the Accelerated EGO algorithm with stop criterion of relative error 
  ###  "QMC" is the initial quasi Monte Carlo points set
  ###  "fun" is the objective function, "model" is the initial  Kriging model
  ###  "npoints" is the number of augmented points each step
  ###  "optimum" is the real global optimum of the objective function
  ###  "eps" is the relative error of the stop criterion
  ###  "lower" and "upper" is the experimental region
  ###  "minimization" can be "T" or "F" to show whether there is the global minimum or maximum
  #############################################################################################
  
  source("randomization.R")
  
  value <- c()             # store the  global optimum each step
  EI_point <- c()          # the point with the lagest EI value each step
  sampling_point <- list() # the points obatained through RQSIR processe ach step
  
  i <- 1
  while(TRUE){
    x_new <- max_EI(model = model, lower = lower, upper = upper, control = control, 
                    minimization = minimization) # maximing the EI function

    if(i==1)
      x_sampling <- resampling(k = npoints-1, RQMC = QMC, model = model, minimization = minimization)
    else{
      RQMC <- randomization(QMC, lower = lower, upper = upper)
      x_sampling <- resampling(k = npoints-1, RQMC = RQMC, model = model, minimization = minimization)
    }                                           # RQSIR process 
    
    add <- rbind(x_new$par, x_sampling)
    model <- update(object = model, newX = add, 
                    newy = as.matrix(apply(add, 1, fun)), 
                    newX.alreadyExist = FALSE, cov.reestim = TRUE, 
                    kmcontrol = list(control = list(trace = FALSE)))  # refit the model 
    
    value[i] <- min(model@y)*minimization + max(model@y)*(!minimization)
    EI_point <- rbind(EI_point, x_new$par)
    sampling_point[[i]] <- x_sampling
    
    if(abs(fun(x_new$par)-optimum)<eps)
      break                               # stop criterion
    i <- i+1
  }
  return(list(nsteps = i, par = EI_point, value = value, add = sampling_point))
}
